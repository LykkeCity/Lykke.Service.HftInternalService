// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Lykke.Service.ClientAccount.Client.AutorestClient.Models;

namespace Lykke.Service.ClientAccount.Client.AutorestClient
{
    /// <summary>
    /// Extension methods for ClientAccountService.
    /// </summary>
    public static partial class ClientAccountServiceExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static WalletDto CreateWallet(this IClientAccountService operations, CreateWalletRequest request = default(CreateWalletRequest))
            {
                return operations.CreateWalletAsync(request).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WalletDto> CreateWalletAsync(this IClientAccountService operations, CreateWalletRequest request = default(CreateWalletRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWalletWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static WalletDto GetWallet(this IClientAccountService operations, string id)
            {
                return operations.GetWalletAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WalletDto> GetWalletAsync(this IClientAccountService operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWalletWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static WalletDto ModifyWallet(this IClientAccountService operations, string id, ModifyWalletRequest request = default(ModifyWalletRequest))
            {
                return operations.ModifyWalletAsync(id, request).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WalletDto> ModifyWalletAsync(this IClientAccountService operations, string id, ModifyWalletRequest request = default(ModifyWalletRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ModifyWalletWithHttpMessagesAsync(id, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteWallet(this IClientAccountService operations, string id)
            {
                operations.DeleteWalletAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteWalletAsync(this IClientAccountService operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWalletWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<WalletDto> GetWalletsByClientId(this IClientAccountService operations, string id)
            {
                return operations.GetWalletsByClientIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<WalletDto>> GetWalletsByClientIdAsync(this IClientAccountService operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWalletsByClientIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
